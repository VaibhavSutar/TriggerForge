generator client {
  provider = "prisma-client-js"
  output   = "../../apps/server/node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  name         String?
  credits      Int      @default(1000)
  plan         String   @default("free")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  transactions CreditTransaction[]
  workflows    Workflow[]                 // ðŸ‘ˆ user owns workflows
}

model CreditTransaction {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  change    Int
  reason    String
  createdAt DateTime @default(now())
  // (optional) executionId String?
  // (optional) execution   Execution? @relation(fields: [executionId], references: [id])
}

model Workflow {
  id          String       @id @default(uuid())
  userId      String                               // ðŸ‘ˆ owner
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  name        String
  json        Json
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  executions  Execution[]  // backref

  @@index([userId])
  @@unique([userId, name]) // ðŸ‘ˆ optional: prevent duplicate names per user
}

enum ExecutionStatus {        // ðŸ‘‡ optional but recommended
  PENDING
  RUNNING
  SUCCEEDED
  FAILED
  CANCELED
}

model Execution {
  id          String          @id @default(uuid())
  workflowId  String
  workflow    Workflow        @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  status      ExecutionStatus @default(PENDING)   // ðŸ‘ˆ enum instead of free string
  input       Json?
  output      Json?
  createdAt   DateTime        @default(now())

  @@index([workflowId])
}
